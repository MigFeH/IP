#BlueJ class context
comment0.target=Matrix
comment0.text=\r\n\ La\ clase\ matrix\ representa\ una\ matriz\ bidimensional\ con\ una\ dimensi\u00F3n\r\n\ m\u00E1xima\ de\ 20x20\r\n\ \r\n\ @author\ Miguel\ \r\n\ @version\ 22-11-21\r\n
comment1.params=n
comment1.target=Matrix(int)
comment1.text=\r\n\ Constructor\ de\ la\ clase\ Matrix\ con\ un\ par\u00E1metro\ entero\r\n\ Crear\u00E1\ una\ matriz\ cuadrada\ de\ dimensi\u00F3n\ n\r\n\ \r\n\ @param\ n,\ la\ dimensi\u00F3n\ de\ la\ matriz\ cuadrada\ (bidimensional)\r\n
comment10.params=
comment10.target=int[][]\ returnMatrix()
comment10.text=\r\n\ El\ m\u00E9todo\ returnMatrix\ retornar\u00E1\ la\ matriz\ bidimensional\ matrix\r\n\ \r\n\ @return\ la\ matrix\ bidimensional\r\n
comment11.params=
comment11.target=int\ getMatrixLength()
comment11.text=\r\n\ El\ m\u00E9todo\ getMatrixLength\ retornar\u00E1\ el\ tama\u00F1o\ de\ la\ matriz\ bidimensional\ (n\u00FAmero\ de\ sus\ filas\ totales)\ \r\n\ \r\n\ @return\ el\ n\u00FAmero\ de\ filas\ de\ matrix\r\n
comment2.params=copy
comment2.target=Matrix(int[][])
comment2.text=\r\n\ Constructor\ de\ la\ clase\ matrix\ con\ un\ par\u00E1metro\ array\ (matriz\ bidimensional)\r\n\ \r\n\ Crea\ una\ matriz\ copia\ a\ partir\ de\ la\ recibida\ como\ par\u00E1metro,\ si\ la\ matriz\ no\ es\ cuadrada\ o\ sobrepasa\ las\ dimensiones\ m\u00E1ximas,\ \r\n\ se\ lanzar\u00E1\ la\ excepci\u00F3n\:\ \u201CThe\ matrix\ must\ be\ square\u201D\r\n\ \r\n\ Se\ usar\u00E1\ este\ constructor\ para\ la\ realizaci\u00F3n\ de\ las\ pruebas\ unitarias\r\n\ \r\n\ @param\ copy,\ la\ matriz\ bidimensional\ cuadrada\ que\ se\ copiar\u00E1\r\n
comment3.params=
comment3.target=int\ getAverage()
comment3.text=\r\n\ El\ m\u00E9todo\ getAverage\ devolver\u00E1\ la\ media\ aritm\u00E9tica\ de\ todos\ los\ elementos\ de\ una\ matriz\r\n\ \r\n\ @return\ la\ media\ aritm\u00E9tica\r\n
comment4.params=
comment4.target=int[]\ addByColumns()
comment4.text=\r\n\ El\ m\u00E9todo\ addByColumns\ devolver\u00E1\ un\ vector\ con\ la\ suma\ de\ los\ elementos\ por\ columnas\r\n\ Consiste\ en\ sumar\ los\ elementos\ de\ cada\ columna\ almacen\u00E1ndolos\ en\ un\ vect\u00F3r\r\n\ \r\n\ @return\ result\ (en\ forma\ de\ un\ vector),\ el\ resultado\ de\ la\ suma\ de\ los\ elementos\ de\ cada\ columna\r\n
comment5.params=
comment5.target=void\ swapColumns()
comment5.text=\r\n\ El\ m\u00E9todo\ swapColumns\ cambiar\u00E1\ los\ elementos\ de\ las\ columnas\ de\ manera\ que\ se\ intercambien\r\n\ las\ columnas\ a\ elegir\ a\ modo\:\ 0-1,1-2,2-3,etc\r\n\ \r\n\ En\ caso\ de\ que\ el\ n\u00FAmero\ de\ columnas\ sea\ impar,\ la\ \u00FAltima\ columna\ ser\u00E1\ la\ que\ se\ quede\ como\ est\u00E1\r\n
comment6.params=
comment6.target=void\ rotateMatrix()
comment6.text=\r\n\ El\ m\u00E9todo\ rotateMatrix\ girar\u00E1\ la\ matriz\ 90\u00BA\ hacia\ la\ izquierda\r\n\ \r\n\ Los\ elementos\ de\ la\ \u00FAltima\ columna,\ se\ situar\u00E1n\ de\ tal\ forma\ que\ la\ \u00FAltima\ columna\ sea\ la\ primera\ fila\ y\ viceversa\ \r\n
comment7.params=row\ column
comment7.target=int\ getMaxAdjacentValue(int,\ int)
comment7.text=\r\n\ El\ m\u00E9todo\ getMaxAdjacentValue\ retornar\u00E1\ el\ valor\ mayor\ adyacente\ a\ una\ posici\u00F3n\ dada.\ \r\n\ Cada\ posici\u00F3n\ tiene\ 8\ adyacentes,\ exceptuando\ las\ posiciones\ de\ los\ extremos\ que\ tienen\ 5\ adyacentes\ o\ de\ las\ esquinas\ que\ tienen\ 3\ adyacentes.\r\n\ \r\n\ @param\ row,\ la\ fila\ del\ elemento\ a\ revisar\r\n\ @param\ column,\ la\ columna\ del\ elemento\ a\ revisar\r\n\ \r\n\ @return\ el\ valor\ mayor\ adyacente\r\n
comment8.params=
comment8.target=int[][]\ smoothMatrix()
comment8.text=\r\n\ El\ m\u00E9todo\ smoothMatrix\ retornar\u00E1\ una\ matriz\ obtenida\ a\ partir\ del\ atributo,\ \r\n\ reemplazando\ cada\ elemento\ por\ la\ media\ aritm\u00E9tica\ de\ los\ vecinos\ (incluyendo\ el\ propio\ elemento)\ de\ la\ matriz\ original\r\n\ \r\n\ @return\ la\ matriz\ obtenida\ a\ partir\ del\ atributo\r\n
comment9.params=condition\ msg
comment9.target=void\ checkParam(boolean,\ java.lang.String)
comment9.text=\r\n\ El\ m\u00E9todo\ checkParam\ comprobar\u00E1\ una\ condici\u00F3n\ y\ si\ no\ se\ cumple,\ lanza\ una\ excepci\u00F3n\r\n\ \r\n\ @param\ condition,\ la\ condici\u00F3n\ a\ evaluar\r\n\ @param\ msg,\ el\ mensaje\ que\ saldr\u00E1\ con\ la\ excepci\u00F3n\r\n
numComments=12
